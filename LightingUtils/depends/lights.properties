# Any global settings.
# if autostart is > -1, the system will autostart with a delay in seconds equal to autostart.
settings.global = $fps 30 $autostart -1

# Create RECIPIENTS.  "$class" is dynamically loaded, so make sure it is in 
# classpath.  It must extend Recipient.  The rest of the params are passed to 
# the Recipient configure() method.
recipient.datagate1 = $class net.electroland.utils.lighting.protocols.artnet.ARTNetRecipient $channels 512 $channelBits 8 $address 127.0.0.1 $universe 1
#recipient.hale = $class net.electroland.util.lighting.protocols.HaleUDPRecipient $channels 300 channelBits 8 $address com1 $rate 30

# A TYPE of FIXTURE.  This is just a prototype, not a concrete instance.
fixtureType.PhilipsLEDBar = $channels 3 $realWidth 100 $realHeight 100 $realUnits meters

# The CHANNEL geometry for a type of fixture (the PhilipsLEDBar fixtureType, 
# above).  These are also not instances of the actual detectors- just attributes 
# of the prototype fixture.  When you do a canvasFixture, a concrete instance 
# will be created that is appropriately translated in space based on the 
# location of the concrete instance of Fixtures that are added to the Canvas(s).
# "$model" is dynamically loaded, so make sure it is in the class path and
# extends DetectionModel. 
detector.c0 = $fixtureType PhilipsLEDBar $index 0 $x 0 $y 0 $w 2 $h 2 $model net.electroland.utils.lighting.detection.RedDetectionModel
detector.c1 = $fixtureType PhilipsLEDBar $index 1 $x 2 $y 0 $w 2 $h 2 $model net.electroland.utils.lighting.detection.GreenDetectionModel
detector.c2 = $fixtureType PhilipsLEDBar $index 2 $x 4 $y 0 $w 2 $h 2 $model net.electroland.utils.lighting.detection.BlueDetectionModel

# Create FIXTURES. These are concrete instances of what fixtureType prototypes, 
# that are actually connected to a hardware recipient. Tags can be used for 
# macros like "turn on all mac:00:00:00" or "turn off f1". Note that these are 
# bound to recipients and fixtureTypes
fixture.f1 = $fixtureType PhilipsLEDBar $startAddress 0 $tags mac:00:00:00, f1 $recipient datagate1 $x 10 $y 10 $z 0
fixture.f2 = $fixtureType PhilipsLEDBar $startAddress 3 $tags mac:00:00:00, f2 $recipient datagate1

# Create a 2 dimensional CANVAS to paint on. "$class" is dynamically loaded, 
# so make sure it is in classpath.  It must extend ELUCanvas. The rest of the 
# params are passed to the ELUCanvas configure() method. 
canvas.my2d = $class net.electroland.utils.lighting.canvas.ELUCanvas2D $height 10 $width 12 $realWidth 100 $realHeight 120 $realUnits inches

# Map fixtures onto the canvas.  In this example, translate the second 1, keep 
# both the same scale.  Fixtures are broken down into Detectors which are
# passed to the ELUCanvas map() method. 
canvasFixture.cf0 = $canvas my2d $fixture f1 $x 0 $y 0 $xScale 1.0 $yScale 1.0
canvasFixture.cf1 = $canvas my2d $fixture f2 $x 6 $y 0 $xScale 1.0 $yScale 1.0


# Tests
test.mytest0 = $tags f1
test.mytest1 = $tags f2
testSuite.mysuite =  $tests mytest0, mytest1 $loops 4 $fps 20 $color 255
#testSuite.sweep = $tests $type sweep...
#testSuite = $type flash $tests mytest0, mytest1, mytest2 $loop 4 $fps 20 $color 255